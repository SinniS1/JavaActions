// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package hotelservices.actions;

import java.math.BigDecimal;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class DistanceByCoordinates extends CustomJavaAction<java.math.BigDecimal>
{
	private final java.math.BigDecimal Lat1;
	private final java.math.BigDecimal Lon1;
	private final java.math.BigDecimal Lat2;
	private final java.math.BigDecimal Lon2;

	public DistanceByCoordinates(
		IContext context,
		java.math.BigDecimal _lat1,
		java.math.BigDecimal _lon1,
		java.math.BigDecimal _lat2,
		java.math.BigDecimal _lon2
	)
	{
		super(context);
		this.Lat1 = _lat1;
		this.Lon1 = _lon1;
		this.Lat2 = _lat2;
		this.Lon2 = _lon2;
	}

	@java.lang.Override
	public java.math.BigDecimal executeAction() throws Exception
	{
		// BEGIN USER CODE
//		throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Java action was not implemented");
		DistanceByCoordinates DbC= new DistanceByCoordinates(getContext(), Lat1, Lon1, Lat2, Lon2);
	double Lt1=	Lat1.doubleValue();
	double Ln1=	Lat2.doubleValue();
	double Lt2=	Lat2.doubleValue();
	double Ln2=	Lat2.doubleValue();

		return DbC.getDistanceFromLatLonInKm(Lt1, Ln1, Lt2, Ln2);
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DistanceByCoordinates";
	}

	// BEGIN EXTRA CODE
	 public BigDecimal getDistanceFromLatLonInKm( double lat1,double lon1,double lat2,double lon2)
	    {
	        var R = 6371; // Radius of the earth in km
	        var dLat = deg2rad(lat2-lat1);  // deg2rad below
	        var dLon = deg2rad(lon2-lon1);
	        var a =
	                Math.sin(dLat/2) * Math.sin(dLat/2) +
	                        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
	                                Math.sin(dLon/2) * Math.sin(dLon/2)  ;
	        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
	        var d = R * c; // Distance in km
	        return new BigDecimal(d);
	        
	    }

	    public double deg2rad( double deg)
	    {
	        return deg * (Math.PI/180);
	    }
	// END EXTRA CODE
}
