// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package hotel_expedia.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mendix.webui.CustomJavaAction;

public class JA_ParseDynamicToStatic_PreBook extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String Dynamic;

	public JA_ParseDynamicToStatic_PreBook(
		IContext context,
		java.lang.String _dynamic
	)
	{
		super(context);
		this.Dynamic = _dynamic;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(Dynamic);

        transformJson(jsonNode);
       return (objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonNode));
  
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_ParseDynamicToStatic_PreBook";
	}

	// BEGIN EXTRA CODE
	 private static void transformJson(JsonNode node) {
	        if (node.isObject()) {
	            if (node.has("occupancy_pricing")) {
	                JsonNode occupancyPricingNode = node.get("occupancy_pricing");
	                if (occupancyPricingNode.isObject()) {
	                    JsonNode newOccupancyPricingNode = transformOccupancyPricing(occupancyPricingNode);
	                    ((ObjectNode) node).set("occupancy_pricing", newOccupancyPricingNode);
	                }
	            }
	            node.fields().forEachRemaining(entry -> transformJson(entry.getValue()));
	        } else if (node.isArray()) {
	            for (JsonNode element : node) {
	                transformJson(element);
	            }
	        }
	    }
	    private static JsonNode transformOccupancyPricing(JsonNode occupancyPricingNode) {
	        ArrayNode newOccupancyPricingNode = new ObjectMapper().createArrayNode();
	        occupancyPricingNode.fields().forEachRemaining(entry -> {
	            String occupancy = (entry.getKey());
	            JsonNode pricingDetails = entry.getValue();
	            ObjectNode newPricingDetails = new ObjectMapper().createObjectNode();
	            newPricingDetails.put("occupancy", occupancy);
	            newPricingDetails.set("nightly", pricingDetails.get("nightly"));
	            newPricingDetails.set("stay", pricingDetails.get("stay"));
	            newPricingDetails.set("totals", pricingDetails.get("totals"));
	            newOccupancyPricingNode.add(newPricingDetails);
	        });
	    
	        return newOccupancyPricingNode;
	    }
	// END EXTRA CODE
}
