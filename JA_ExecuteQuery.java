// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package dbmaintenance.actions;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import org.apache.commons.lang3.exception.ExceptionUtils;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class JA_ExecuteQuery extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String Query;

	public JA_ExecuteQuery(
		IContext context,
		java.lang.String _query
	)
	{
		super(context);
		this.Query = _query;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		logger.debug("execute query: " + Query);

		String result = Core.dataStorage().executeWithConnection(connection -> {
			try {
				PreparedStatement stmt = connection.prepareStatement(Query);
				ResultSet rset = stmt.executeQuery();

				String resultString = processResultSet(rset);

				return resultString;

			} catch (SQLException e) {

				String errorString = "Failed to execute sql statement: " + e.getMessage();
				errorString += ExceptionUtils.getStackTrace(e);

				return errorString;
			}
		});

		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_ExecuteQuery";
	}

	// BEGIN EXTRA CODE
	private static final int MAX_COLUMN_lENGTH = 50;
	private final ILogNode logger = Core.getLogger(this.getClass().getName());

	// Code c/p'd from
	// https://stackoverflow.com/questions/38623194/jdbc-format-resultset-as-tabular-string

	private String processResultSet(ResultSet rs) throws SQLException {
		StringBuilder sb = new StringBuilder();

		ResultSetMetaData rsmd = rs.getMetaData();
		int totalCols = rsmd.getColumnCount();
		int[] colCounts = new int[totalCols];
		String[] colLabels = new String[totalCols];
		for (int i = 0; i < totalCols; i++) {
			colCounts[i] = getLength(rsmd, i);
			colLabels[i] = rsmd.getColumnLabel(i + 1);
			if (colLabels[i].length() > colCounts[i]) {
				colLabels[i] = colLabels[i].substring(0, colCounts[i]);
			}
			sb.append(String.format("| %" + colCounts[i] + "s ", colLabels[i]));
		}
		sb.append("|\n");

		String horizontalLine = getHorizontalLine(colCounts);
		while (rs.next()) {
			sb.append(horizontalLine);
			for (int i = 0; i < totalCols; i++) {
				sb.append(String.format("| %" + colCounts[i] + "s ", getString(rs, i)));
			}
			sb.append("|\n");

		}

		return (getHorizontalLine(colCounts) + sb.toString());
	}

	private String getString(ResultSet rs, int i) throws SQLException {
		String string = rs.getString(i + 1);

		if (string != null && string.length() > MAX_COLUMN_lENGTH) {
			return string.substring(0, MAX_COLUMN_lENGTH);
		}

		return string;
	}

	private int getLength(ResultSetMetaData rsmd, int i) throws SQLException {
		int columnDisplaySize = rsmd.getColumnDisplaySize(i + 1);

		if (columnDisplaySize > MAX_COLUMN_lENGTH) {
			return MAX_COLUMN_lENGTH;
		}

		return columnDisplaySize;
	}

	private String getHorizontalLine(int[] colCounts) {
		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < colCounts.length; i++) {
			sb.append("+");
			for (int j = 0; j < colCounts[i] + 2; j++) {
				sb.append("-");
			}
		}
		sb.append("+\n");

		return sb.toString();
	}
	// END EXTRA CODE
}
